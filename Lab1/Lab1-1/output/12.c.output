(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef a) ;))) (blockItem (decl (varDecl (bType int) (varDef b) [))) (blockItem (stmt (exp (number 10)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) ,)) (blockItem (stmt (exp (number 4)) ,)) (blockItem (stmt (exp (number 5)) ,)) (blockItem (stmt (exp (number 6)) } ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 5)) ] =)) (blockItem (stmt (exp (number 3)) ;)) (blockItem (stmt if ( (cond (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] >)) (blockItem (stmt (exp (number 0)) ) ;)) (blockItem (stmt if ( (cond (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] <)) (blockItem (stmt (exp (number 0)) ))) (blockItem (stmt (block { }))) (blockItem (stmt if ( (cond (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] >=)) (blockItem (stmt (exp (number 1)) ))) (blockItem (stmt (block { (blockItem (stmt ;)) }))) (blockItem (stmt if ( (cond (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] <=)) (blockItem (stmt (exp (number 2)) ))) (blockItem (stmt (block { }))) else (blockItem (stmt (block { }))) (blockItem (stmt if ( (cond (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ==)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 6)) ] ))) (blockItem (stmt (block { (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 5)) ] =)) (blockItem (stmt (exp (exp (number 2)) - (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) }))) else (blockItem (stmt (block { (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 5)) ] =)) (blockItem (stmt (exp (exp (number 2)) + (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) }))) (blockItem (stmt if ( (cond (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] !=)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 2)) ] ))) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 5)) ] =)) (blockItem (stmt (exp (number 3)) ;)) else (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 5)) ] =)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (number 6)) ] ;)) }))) <missing '}'>)) <EOF>)
