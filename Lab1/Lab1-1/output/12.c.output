(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef a) ;))) (blockItem (decl (varDecl (bType int) (varDef (array (unobcArray b [ (exp (number 10)) ])) = { (exp (number 0)) , (exp (number 1)) , (exp (number 2)) , (exp (number 3)) , (exp (number 4)) , (exp (number 5)) , (exp (number 6)) }) ;))) (blockItem (stmt (exp (lval b [ (exp (number 5)) ]) = (exp (number 3))) ;)) (blockItem (stmt if ( (cond (exp (exp (lval b [ (exp (number 5)) ])) > (exp (number 0)))) ) (stmt ;))) (blockItem (stmt if ( (cond (exp (exp (lval b [ (exp (number 5)) ])) < (exp (number 0)))) ) (stmt (block { })))) (blockItem (stmt if ( (cond (exp (exp (lval b [ (exp (number 5)) ])) >= (exp (number 1)))) ) (stmt (block { (blockItem (stmt ;)) })))) (blockItem (stmt if ( (cond (exp (exp (lval b [ (exp (number 5)) ])) <= (exp (number 2)))) ) (stmt (block { })) else (stmt (block { })))) (blockItem (stmt if ( (cond (exp (exp (lval b [ (exp (number 5)) ])) == (exp (lval b [ (exp (number 6)) ])))) ) (stmt (block { (blockItem (stmt (exp (exp (lval b [ (exp (number 5)) ]) = (exp (number 2))) - (exp (lval b [ (exp (number 5)) ]))) ;)) })) else (stmt (block { (blockItem (stmt (exp (exp (lval b [ (exp (number 5)) ]) = (exp (number 2))) + (exp (lval b [ (exp (number 5)) ]))) ;)) })))) (blockItem (stmt if ( (cond (exp (exp (lval b [ (exp (number 5)) ])) != (exp (lval b [ (exp (number 2)) ])))) ) (stmt (exp (lval b [ (exp (number 5)) ]) = (exp (number 3))) ;) else (stmt (exp (lval b [ (exp (number 5)) ]) = (exp (lval b [ (exp (number 6)) ]))) ;))) })) <EOF>)
