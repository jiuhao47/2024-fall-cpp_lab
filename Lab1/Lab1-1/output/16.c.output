(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef x = (exp - (exp (exp (exp (number 1)) + (exp + (number 2))) - (exp - (exp (number 0))))))))) (blockItem (stmt (exp (exp (lval x100)) + (exp - (exp (number 0)))) <missing ';'>)) (blockItem (stmt (exp (exp (lval X21)) * (exp (number 9))) ;)) (blockItem (decl (varDecl (bType int) (varDef y) [))) (blockItem (stmt (exp (number 16)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) , +)) (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp - (exp (number 0))) ,)) (blockItem (stmt (exp (exp (number 0)) + (exp + (number 0))) ,)) (blockItem (stmt (exp (exp (number 0)) - (exp - (exp (number 0)))) , +)) (blockItem (stmt (exp (exp (number 0)) + (exp (number 0))) , +)) (blockItem (stmt (exp (exp (number 0)) + (exp + (number 0))) , +)) (blockItem (stmt (exp (exp (number 0)) + (exp - (exp (number 0)))) ,)) (blockItem (stmt (exp - (exp (exp (number 0)) + (exp (number 0)))) ,)) (blockItem (stmt (exp - (exp (exp (number 0)) + (exp + (number 0)))) ,)) (blockItem (stmt (exp - (exp (exp (number 0)) + (exp - (exp (number 0))))) } ;)) (blockItem (stmt (exp (lval x) = (exp ( (exp (lval y)) [)) <missing ';'>)) (blockItem (stmt (exp (number 3)) ] +)) (blockItem (stmt (exp (number 9)) ) /)) (blockItem (stmt (exp ( (exp (exp (number 9)) - (exp - (exp (lval y)))) [) <missing ';'>)) (blockItem (stmt (exp (number 0)) ] ))) (blockItem (stmt ;)) (blockItem (stmt (exp (exp (lval x) = (exp + (number 9))) * (exp - (exp (exp (exp (number 9)) / (exp ( (exp (number 1)) ))) % (exp ( (exp (number 0)))))) <missing ';'>)) (blockItem (stmt (exp (exp (exp (lval x100)) + (exp (number 9))) * (exp - (exp (number 13)))) ))) (blockItem (stmt (exp - (exp (exp (exp (number 200)) + (exp (lval x))) * (exp (lval y)))) [)) (blockItem (stmt (exp (exp (lval x)) * (exp (lval y))) [)) (blockItem (stmt (exp (lval x)) ] ])) (blockItem (stmt ;)) }))) <missing '}'>)) <EOF>)
