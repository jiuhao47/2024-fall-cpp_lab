(compUnit (decl (constDecl const (bType int) (constDef a = (number 3)) ;)) (decl (constDecl const (bType int) (constDef b = (number 4)) , (constDef c = (number + 5)) , (constDef d = (number 1)) + 9 ;)) (decl (constDecl const (bType int) (constDef e [ a ] = { 1) , (constDef 2) , (constDef 3 }) ;)) (decl (constDecl const (bType int) (constDef f [ ] = { 3) , (constDef 0 x13) , (constDef - 0 x19 }) , (constDef obc g [ ] = { 100) , (constDef 101) , (constDef 102) , (constDef 103) , (constDef 104 }) ;)) (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef x = (exp (exp (exp (exp (lval a)) * (exp (lval b))) + (exp (lval c))) % (exp ( (exp (exp (lval d)) + (exp (lval e))) [))) <missing ';'>))) (blockItem (stmt (exp (exp (lval b)) - (exp (number 3))) ] *)) (blockItem (stmt (exp (lval f)) [)) (blockItem (stmt (exp (number 1)) ] ))) (blockItem (stmt (exp - (exp (lval g))) [)) (blockItem (stmt (exp (number 3)) ] ;)) (blockItem (decl (varDecl (bType int) (varDef y) [ ] =))) (blockItem (stmt (block { (blockItem (stmt (exp (exp (lval a)) + (exp (lval e))) [)) (blockItem (stmt (exp (number 0)) ] ,)) (blockItem (stmt (exp (lval f)) [)) (blockItem (stmt (exp (number 1)) ] +)) (blockItem (stmt (exp (lval g)) [)) (blockItem (stmt (exp (number 1)) ])) }))) (blockItem (stmt ;)) })) <EOF>)
