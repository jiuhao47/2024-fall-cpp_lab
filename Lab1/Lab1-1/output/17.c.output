(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef x = (exp (number 0))) x000000000000000000012345 , (varDef y = (exp - (exp (number 0)))) xAbCdEf10 ;))) (blockItem (decl (varDecl (bType int) (varDef y) [))) (blockItem (stmt (exp (number 16)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) , +)) (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp - (exp (number 0))) ,)) (blockItem (stmt (exp (exp (number 0)) + (exp + (number 0))) ,)) (blockItem (stmt (exp (exp (number 0)) - (exp - (exp (number 0)))) , +)) (blockItem (stmt (exp (exp (number 0)) + (exp (number 0))) , +)) (blockItem (stmt (exp (exp (number 0)) + (exp + (number 0))) , +)) (blockItem (stmt (exp (exp (number 0)) + (exp - (exp (number 0)))) ,)) (blockItem (stmt (exp - (exp (exp (number 0)) + (exp (number 0)))) ,)) (blockItem (stmt (exp - (exp (exp (number 0)) + (exp + (number 0)))) ,)) (blockItem (stmt (exp - (exp (exp (number 0)) + (exp - (exp (number 0))))) } ;)) (blockItem (stmt if ( (cond (exp (exp (lval x)) == (exp - (exp (exp (lval x)) + (exp (number 2)))))) ) (stmt (exp (lval y)) [))) (blockItem (stmt (exp (exp (exp (number 5)) * (exp (number 2))) - (exp (number 1))) ] =)) (blockItem (stmt (exp - (exp (lval y))) [)) (blockItem (stmt (exp (exp (exp (number 5)) - (exp (number 2))) * (exp (number 1))) ] ;)) else (blockItem (stmt (block { (blockItem (stmt (block { (blockItem (stmt (exp (lval x) = (exp (number 3))) ;)) }))) (blockItem (stmt (block { (blockItem (decl (varDecl (bType int) (varDef z) ;))) (blockItem (stmt (exp (lval z) = (exp (number 3))) ;)) (blockItem (stmt (exp (lval z) = (exp (number 4))) ;)) (blockItem (stmt (exp (lval z) = (exp (number 5))) ;)) }))) }))) }))) <missing '}'>)) <EOF>)
