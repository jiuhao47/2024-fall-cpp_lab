(compUnit (funcDef void func ( ) (block { (blockItem (decl (constDecl const (bType int) (constDef a = (number 3)) ;))) (blockItem (decl (constDecl const (bType int) (constDef b [ ] =) <missing ';'>))) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) ,)) (blockItem (stmt (exp (number 4)) } ;)) (blockItem (decl (constDecl const (bType int) (constDef obc c [) <missing ';'>))) (blockItem (stmt (exp (number 10)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) ,)) (blockItem (stmt (exp (number 4)) } ;)) (blockItem (decl (varDecl (bType int) (varDef d) ;))) (blockItem (decl (varDecl (bType int) (varDef e) [ ] =))) (blockItem (stmt (block { (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) } ;)) (blockItem (decl (varDecl (bType int) (varDef obc f) [))) (blockItem (stmt (exp (number 0)) <missing ';'>)) (blockItem (stmt (exp (lval x10)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) ,)) (blockItem (stmt (exp (number 4)) ,)) (blockItem (stmt (exp - (exp (number 0))) ,)) (blockItem (stmt (exp - (exp (number 1))) ,)) (blockItem (stmt (exp - (exp (number 2))) } ;)) })))))) <EOF>))) <EOF>))) <missing '}'>)) <EOF>)
