(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef a = (exp (number 20))) ;))) (blockItem (decl (varDecl (bType int) (varDef (array (unobcArray b [ (exp (lval a)) ])) = { (exp (number 0)) , (exp (number 1)) , (exp (number 2)) , (exp (number 3)) , (exp (number 4)) , (exp (number 5)) , (exp (number 6)) }) ;))) (blockItem (decl (varDecl (bType int) (varDef c = (exp (number 2))) ;))) (blockItem (stmt (exp (lval b [ (exp (lval c)) ]) = (exp + (exp (number 10)))) ;)) (blockItem (stmt (exp (lval b [ (exp (lval c)) ]) = (exp - (exp (lval b [ (exp (number 3)) ])))) ;)) (blockItem (stmt (exp (exp (lval b [ (exp (lval c)) ]) = (exp (lval a))) + (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval b [ (exp (lval c)) ]) = (exp (lval a))) - (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval b [ (exp (lval c)) ]) = (exp (lval a))) * (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval b [ (exp (lval c)) ]) = (exp (lval a))) / (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval b [ (exp (lval c)) ]) = (exp (lval a))) % (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (lval b [ (exp (lval c)) ]) = (exp ( (exp (lval b [ (exp (exp (lval c)) + (exp (number 2))) ])) ))) ;)) (blockItem (stmt (exp (exp (exp (lval b [ (exp (exp (lval c)) + (exp (number 3))) ]) = (exp (lval c))) * (exp (lval a))) + (exp (number 0x12))) ;)) (blockItem (stmt (exp (lval b [ (exp (exp (lval c)) / (exp (number 2))) ]) = (exp + (exp (exp (number 0x12)) * (exp - (exp (exp (exp (number 0X13)) + (exp (number 1234567890))) * (exp (lval a))))))) ;)) })) <EOF>)
