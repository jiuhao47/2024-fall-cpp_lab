(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef a = (exp (number 20))) ;))) (blockItem (decl (varDecl (bType int) (varDef b) [))) (blockItem (stmt (exp (lval a)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) ,)) (blockItem (stmt (exp (number 4)) ,)) (blockItem (stmt (exp (number 5)) ,)) (blockItem (stmt (exp (number 6)) } ;)) (blockItem (decl (varDecl (bType int) (varDef c = (exp (number 2))) ;))) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] = +)) (blockItem (stmt (exp (number 10)) ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp - (exp (lval b))) [)) (blockItem (stmt (exp (number 3)) ] ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp (exp (lval a)) + (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp (exp (lval a)) - (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp (exp (lval a)) * (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp (exp (lval a)) / (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp (exp (lval a)) % (exp (lval b))) [)) (blockItem (stmt (exp (number 5)) ] ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (lval c)) ] =)) (blockItem (stmt (exp ( (exp (lval b)) [) <missing ';'>)) (blockItem (stmt (exp (exp (lval c)) + (exp (number 2))) ] ))) (blockItem (stmt ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (exp (lval c)) + (exp (number 3))) ] =)) (blockItem (stmt (exp (exp (exp (lval c)) * (exp (lval a))) + (exp (number 0))) x12 ;)) (blockItem (stmt (exp (lval b)) [)) (blockItem (stmt (exp (exp (lval c)) / (exp (number 2))) ] = +)) (blockItem (stmt (exp (number 0)) <missing ';'>)) (blockItem (stmt (exp (exp (lval x12)) * (exp - (exp (number 0)))) <missing ';'>)) (blockItem (stmt (exp (exp (exp (lval X13)) + (exp (number 1234567890))) * (exp (lval a))) ;)) }))) <missing '}'>)) <EOF>)
