(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef a = (exp (number 20))) ;))) (blockItem (decl (varDecl (bType int) (varDef (array (unobcArray b [ (exp (lval a)) ])) = { (exp (number 0)) , (exp (number 1)) , (exp (number 2)) , (exp (number 3)) , (exp (number 4)) , (exp (number 5)) , (exp (number 6)) }) ;))) (blockItem (stmt (exp (lval a) = (exp + (exp (number 10)))) ;)) (blockItem (stmt (exp (lval a) = (exp - (exp (lval b [ (exp (number 3)) ])))) ;)) (blockItem (stmt (exp (exp (lval a) = (exp (lval a))) + (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval a) = (exp (lval a))) - (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval a) = (exp (lval a))) * (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval a) = (exp (lval a))) / (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (exp (lval a) = (exp (lval a))) % (exp (lval b [ (exp (number 5)) ]))) ;)) (blockItem (stmt (exp (lval a) = (exp ( (exp (lval a)) ))) ;)) (blockItem (decl (varDecl (bType int) (varDef c) ;))) (blockItem (stmt (exp (lval c) = (exp (lval a))) ;)) (blockItem (stmt (exp (exp (exp (lval c) = (exp (lval c))) * (exp (lval a))) + (exp (number 0x12))) ;)) (blockItem (stmt (exp (exp (exp (exp (lval c) = (exp (number 0x12))) * (exp (number 0X13))) + (exp (number 1234567890))) * (exp (lval a))) ;)) })) <EOF>)
