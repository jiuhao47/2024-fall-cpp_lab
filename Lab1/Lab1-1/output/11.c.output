(compUnit (funcDef void func ( ) (block { (blockItem (decl (varDecl (bType int) (varDef a) ;))) (blockItem (decl (varDecl (bType int) (varDef b) [))) (blockItem (stmt (exp (number 10)) ] =)) (blockItem (stmt (block { (blockItem (stmt (exp (number 0)) ,)) (blockItem (stmt (exp (number 1)) ,)) (blockItem (stmt (exp (number 2)) ,)) (blockItem (stmt (exp (number 3)) ,)) (blockItem (stmt (exp (number 4)) ,)) (blockItem (stmt (exp (number 5)) ,)) (blockItem (stmt (exp (number 6)) } ;)) (blockItem (stmt (exp (lval a) = (exp (number 3))) ;)) (blockItem (stmt if ( (cond (exp (exp (lval a)) > (exp (number 0)))) ) (stmt ;))) (blockItem (stmt if ( (cond (exp (exp (lval a)) < (exp (number 0)))) ) (stmt (block { })))) (blockItem (stmt if ( (cond (exp (exp (lval a)) >= (exp (number 1)))) ) (stmt (block { (blockItem (stmt ;)) })))) (blockItem (stmt if ( (cond (exp (exp (lval a)) <= (exp (number 2)))) ) (stmt (block { })) else (stmt (block { })))) (blockItem (stmt if ( (cond (exp (exp (lval a)) == (exp (number 3)))) ) (stmt (block { (blockItem (stmt (exp (exp (lval a) = (exp (number 2))) - (exp (lval a))) ;)) })) else (stmt (block { (blockItem (stmt (exp (exp (lval a) = (exp (number 2))) + (exp (lval a))) ;)) })))) (blockItem (stmt if ( (cond (exp (exp (lval a)) != (exp (number 3)))) ) (stmt (exp (lval a) = (exp (number 3))) ;) else (stmt (exp (lval a) = (exp (lval b))) [))) (blockItem (stmt (exp (number 0)) ] ;)) }))) <missing '}'>)) <EOF>)
