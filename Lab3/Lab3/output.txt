[j]  ConstantPropagator.cpp runOnModule 612
============
[j]  Function: obc_check_error_impl
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compForwardDataflow 105
============
[j]  Function: funcA
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compForwardDataflow 105
------------init
[j]  BB: entry
[j]  worklist:
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: if
[j]  worklist:
entry
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: else
[j]  worklist:
entry
if
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: merge
[j]  worklist:
entry
if
else
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

------------calc
[j]  BB: else
  store i32 10, ptr @arg1, align 4
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 10, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

------------calc
[j]  BB: if
  store i32 9, ptr @arg1, align 4
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 9, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 10 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 10 
  }
}

------------calc
[j]  BB: entry
  %x = alloca i32, align 4
  store i32 -1, ptr %x, align 4
  %cond = alloca i32, align 4
  store i32 -1, ptr %cond, align 4
  call void @input()
  %input_var = load i32, ptr @input_var, align 4
  store i32 %input_var, ptr %cond, align 4
  %cond1 = load i32, ptr %cond, align 4
  %0 = srem i32 %cond1, 7
  %1 = icmp eq i32 %0, 5
  br i1 %1, label %if, label %else
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x = alloca i32, align 4
[j]  Other inst:   %x = alloca i32, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 -1, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond = alloca i32, align 4
[j]  Other inst:   %cond = alloca i32, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 -1, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @input()
[j]  Other inst:   call void @input()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %input_var = load i32, ptr @input_var, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %input_var, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond1 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %0 = srem i32 %cond1, 7
[j]  BinaryOperator:   %0 = srem i32 %cond1, 7
[j]  op1 in cvmap
[j]  constOp2
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %1 = icmp eq i32 %0, 5
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %1, label %if, label %else
[j]  Other inst:   br i1 %1, label %if, label %else
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  }
}

------------calc
[j]  BB: else
  store i32 10, ptr @arg1, align 4
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 10, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  @arg1 = global i32 0 -> 10 
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 10 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  @arg1 = global i32 0 -> 9 10 
  }
}

------------calc
[j]  BB: if
  store i32 9, ptr @arg1, align 4
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 9, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  @arg1 = global i32 0 -> 10 
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 10 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  @arg1 = global i32 0 -> 9 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 10 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  @arg1 = global i32 0 -> 9 10 
  }
}

============
[j]  Function: funcB
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compForwardDataflow 105
------------init
[j]  BB: entry
[j]  worklist:
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: if
[j]  worklist:
entry
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: else
[j]  worklist:
entry
if
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: merge
[j]  worklist:
entry
if
else
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: if3
[j]  worklist:
entry
if
else
merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: else4
[j]  worklist:
entry
if
else
merge
if3
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: merge5
[j]  worklist:
entry
if
else
merge
if3
else4
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: cond7
[j]  worklist:
entry
if
else
merge
if3
else4
merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: body
[j]  worklist:
entry
if
else
merge
if3
else4
merge5
cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: merge8
[j]  worklist:
entry
if
else
merge
if3
else4
merge5
cond7
body
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------calc
[j]  BB: merge8
  %x12 = load i32, ptr %x, align 4
  store i32 %x12, ptr @arg1, align 4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x12 = load i32, ptr %x, align 4
[j]  Load: not found, set to TOP
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x12, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: body
  %x10 = load i32, ptr %x, align 4
  %5 = add i32 1, %x10
  store i32 %5, ptr %x, align 4
  %cond11 = load i32, ptr %cond, align 4
  %6 = sub i32 %cond11, 1
  store i32 %6, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x10 = load i32, ptr %x, align 4
[j]  Load: not found, set to TOP
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %5 = add i32 1, %x10
[j]  BinaryOperator:   %5 = add i32 1, %x10
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %5, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond11 = load i32, ptr %cond, align 4
[j]  Load: not found, set to TOP
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %6 = sub i32 %cond11, 1
[j]  BinaryOperator:   %6 = sub i32 %cond11, 1
[j]  op1 in cvmap
[j]  constOp2
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %6, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge8
  %x12 = load i32, ptr %x, align 4
  store i32 %x12, ptr @arg1, align 4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x12 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x12, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: body
  %x10 = load i32, ptr %x, align 4
  %5 = add i32 1, %x10
  store i32 %5, ptr %x, align 4
  %cond11 = load i32, ptr %cond, align 4
  %6 = sub i32 %cond11, 1
  store i32 %6, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x10 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %5 = add i32 1, %x10
[j]  BinaryOperator:   %5 = add i32 1, %x10
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %5, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond11 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %6 = sub i32 %cond11, 1
[j]  BinaryOperator:   %6 = sub i32 %cond11, 1
[j]  op1 in cvmap
[j]  constOp2
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %6, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: else4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

------------calc
[j]  BB: if3
  %cond6 = load i32, ptr %cond, align 4
  %3 = sub i32 0, %cond6
  store i32 %3, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond6 = load i32, ptr %cond, align 4
[j]  Load: not found, set to TOP
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %3 = sub i32 0, %cond6
[j]  BinaryOperator:   %3 = sub i32 0, %cond6
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %3, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge8
  %x12 = load i32, ptr %x, align 4
  store i32 %x12, ptr @arg1, align 4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x12 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x12, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: body
  %x10 = load i32, ptr %x, align 4
  %5 = add i32 1, %x10
  store i32 %5, ptr %x, align 4
  %cond11 = load i32, ptr %cond, align 4
  %6 = sub i32 %cond11, 1
  store i32 %6, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x10 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %5 = add i32 1, %x10
[j]  BinaryOperator:   %5 = add i32 1, %x10
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %5, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond11 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %6 = sub i32 %cond11, 1
[j]  BinaryOperator:   %6 = sub i32 %cond11, 1
[j]  op1 in cvmap
[j]  constOp2
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %6, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: else
  %cond2 = load i32, ptr %cond, align 4
  %2 = icmp slt i32 %cond2, 0
  br i1 %2, label %if3, label %else4
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond2 = load i32, ptr %cond, align 4
[j]  Load: not found, set to TOP
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %2 = icmp slt i32 %cond2, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %2, label %if3, label %else4
[j]  Other inst:   br i1 %2, label %if3, label %else4
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: else4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: if3
  %cond6 = load i32, ptr %cond, align 4
  %3 = sub i32 0, %cond6
  store i32 %3, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond6 = load i32, ptr %cond, align 4
[j]  Load: not found, set to TOP
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %3 = sub i32 0, %cond6
[j]  BinaryOperator:   %3 = sub i32 0, %cond6
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %3, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge8
  %x12 = load i32, ptr %x, align 4
  store i32 %x12, ptr @arg1, align 4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x12 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x12, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: body
  %x10 = load i32, ptr %x, align 4
  %5 = add i32 1, %x10
  store i32 %5, ptr %x, align 4
  %cond11 = load i32, ptr %cond, align 4
  %6 = sub i32 %cond11, 1
  store i32 %6, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x10 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %5 = add i32 1, %x10
[j]  BinaryOperator:   %5 = add i32 1, %x10
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %5, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond11 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %6 = sub i32 %cond11, 1
[j]  BinaryOperator:   %6 = sub i32 %cond11, 1
[j]  op1 in cvmap
[j]  constOp2
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %6, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

------------calc
[j]  BB: if
  store i32 9, ptr @arg1, align 4
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 9, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: entry
  %x = alloca i32, align 4
  store i32 -1, ptr %x, align 4
  %cond = alloca i32, align 4
  store i32 -1, ptr %cond, align 4
  call void @input()
  %input_var = load i32, ptr @input_var, align 4
  store i32 %input_var, ptr %cond, align 4
  %cond1 = load i32, ptr %cond, align 4
  %0 = srem i32 %cond1, 7
  %1 = icmp eq i32 %0, 5
  br i1 %1, label %if, label %else
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x = alloca i32, align 4
[j]  Other inst:   %x = alloca i32, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 -1, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond = alloca i32, align 4
[j]  Other inst:   %cond = alloca i32, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 -1, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @input()
[j]  Other inst:   call void @input()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %input_var = load i32, ptr @input_var, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %input_var, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond1 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %0 = srem i32 %cond1, 7
[j]  BinaryOperator:   %0 = srem i32 %cond1, 7
[j]  op1 in cvmap
[j]  constOp2
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %1 = icmp eq i32 %0, 5
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %1, label %if, label %else
[j]  Other inst:   br i1 %1, label %if, label %else
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  }
}

------------calc
[j]  BB: else
  %cond2 = load i32, ptr %cond, align 4
  %2 = icmp slt i32 %cond2, 0
  br i1 %2, label %if3, label %else4
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond2 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %2 = icmp slt i32 %cond2, 0
[j]  icmp:   %2 = icmp slt i32 %cond2, 0
[j]  val1: 0 val2: 0 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %2, label %if3, label %else4
[j]  Other inst:   br i1 %2, label %if3, label %else4
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

------------calc
[j]  BB: else4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> 0 
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> 0 
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %5 = add i32 1, %x10 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %5 = add i32 1, %x10 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

------------calc
[j]  BB: if3
  %cond6 = load i32, ptr %cond, align 4
  %3 = sub i32 0, %cond6
  store i32 %3, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond6 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %3 = sub i32 0, %cond6
[j]  BinaryOperator:   %3 = sub i32 0, %cond6
[j]  constOp1
[j]  op2 in cvmap
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %3, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %3 = sub i32 0, %cond6 -> 0 
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %cond6 = load i32, ptr %cond, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> 0 
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond6 = load i32, ptr %cond, align 4 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %3 = sub i32 0, %cond6 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %6 = sub i32 %cond11, 1 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: merge8
  %x12 = load i32, ptr %x, align 4
  store i32 %x12, ptr @arg1, align 4
  br label %merge5
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x12 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x12, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge5
[j]  Other inst:   br label %merge5
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %x10 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
  }
}

------------calc
[j]  BB: merge5
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> 0 
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %0 = srem i32 %cond1, 7 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
  @arg1 = global i32 0 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

------------calc
[j]  BB: body
  %x10 = load i32, ptr %x, align 4
  %5 = add i32 1, %x10
  store i32 %5, ptr %x, align 4
  %cond11 = load i32, ptr %cond, align 4
  %6 = sub i32 %cond11, 1
  store i32 %6, ptr %cond, align 4
  br label %cond7
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x10 = load i32, ptr %x, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %5 = add i32 1, %x10
[j]  BinaryOperator:   %5 = add i32 1, %x10
[j]  constOp1
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %5, ptr %x, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond11 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %6 = sub i32 %cond11, 1
[j]  BinaryOperator:   %6 = sub i32 %cond11, 1
[j]  op1 in cvmap
[j]  constOp2
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %6, ptr %cond, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %cond7
[j]  Other inst:   br label %cond7
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %x10 = load i32, ptr %x, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x10 = load i32, ptr %x, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
  }
}

------------calc
[j]  BB: cond7
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %0 = srem i32 %cond1, 7 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = icmp slt i32 %cond2, 0 -> 0 
    %cond6 = load i32, ptr %cond, align 4 -> 0 
    %cond2 = load i32, ptr %cond, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %3 = sub i32 0, %cond6 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %cond9 = load i32, ptr %cond, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = icmp sge i32 %cond9, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %4, label %body, label %merge8
[j]  Other inst:   br i1 %4, label %body, label %merge8
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %cond = alloca i32, align 4 -> TOP
  }
}

------------calc
[j]  BB: if
  store i32 9, ptr @arg1, align 4
  br label %merge
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 9, ptr @arg1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %merge
[j]  Other inst:   br label %merge
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @arg1 = global i32 0 -> 9 
    %x = alloca i32, align 4 -> -1 
    %cond = alloca i32, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
  }
}

------------calc
[j]  BB: merge
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %0 = srem i32 %cond1, 7 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %5 = add i32 1, %x10 -> TOP
  }
}

[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %1 = icmp eq i32 %0, 5 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %cond = alloca i32, align 4 -> 0 
    %x = alloca i32, align 4 -> -1 
  @arg1 = global i32 0 -> 9 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %6 = sub i32 %cond11, 1 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %6 = sub i32 %cond11, 1 -> TOP
    %cond11 = load i32, ptr %cond, align 4 -> TOP
    %4 = icmp sge i32 %cond9, 0 -> TOP
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %2 = icmp slt i32 %cond2, 0 -> TOP
    %5 = add i32 1, %x10 -> TOP
    %1 = icmp eq i32 %0, 5 -> TOP
    %cond9 = load i32, ptr %cond, align 4 -> TOP
    %0 = srem i32 %cond1, 7 -> TOP
    %cond1 = load i32, ptr %cond, align 4 -> 0 
    %cond = alloca i32, align 4 -> TOP
    %x12 = load i32, ptr %x, align 4 -> TOP
    %3 = sub i32 0, %cond6 -> TOP
    %x = alloca i32, align 4 -> TOP
    %cond2 = load i32, ptr %cond, align 4 -> TOP
    %cond6 = load i32, ptr %cond, align 4 -> TOP
    %x10 = load i32, ptr %x, align 4 -> TOP
  @arg1 = global i32 0 -> TOP
  }
}

============
[j]  Function: main
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compForwardDataflow 105
------------init
[j]  BB: entry
[j]  worklist:
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: obc_check_0
[j]  worklist:
entry
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: obc_err_0
[j]  worklist:
entry
obc_check_0
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: obc_ok_0
[j]  worklist:
entry
obc_check_0
obc_err_0
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: obc_check_1
[j]  worklist:
entry
obc_check_0
obc_err_0
obc_ok_0
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: obc_err_1
[j]  worklist:
entry
obc_check_0
obc_err_0
obc_ok_0
obc_check_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------init
[j]  BB: obc_ok_1
[j]  worklist:
entry
obc_check_0
obc_err_0
obc_ok_0
obc_check_1
obc_err_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp initGlobal 573
------------calc
[j]  BB: obc_ok_1
  %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
  %x8 = load i32, ptr %23, align 4
  store i32 %x8, ptr @output_var, align 4
  call void @output()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
[j]  GEP: not const
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x8 = load i32, ptr %23, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x8, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @output_var = global i32 0 -> TOP
    %x8 = load i32, ptr %23, align 4 -> TOP
    %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7 -> TOP
  }
}

------------calc
[j]  BB: obc_err_1
  store i32 62, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

------------calc
[j]  BB: obc_check_1
  %20 = icmp slt i32 %a7, 0
  %21 = icmp sge i32 %a7, 16
  %22 = or i1 %21, %20
  br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %20 = icmp slt i32 %a7, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %21 = icmp sge i32 %a7, 16
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %22 = or i1 %21, %20
[j]  BinaryOperator:   %22 = or i1 %21, %20
[j]  op1 in cvmap
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  Other inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %22 = or i1 %21, %20 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %20 = icmp slt i32 %a7, 0 -> TOP
  }
}

------------calc
[j]  BB: obc_ok_1
  %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
  %x8 = load i32, ptr %23, align 4
  store i32 %x8, ptr @output_var, align 4
  call void @output()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %22 = or i1 %21, %20 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
[j]  GEP: not const
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x8 = load i32, ptr %23, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x8, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %22 = or i1 %21, %20 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %20 = icmp slt i32 %a7, 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  @output_var = global i32 0 -> TOP
    %x8 = load i32, ptr %23, align 4 -> TOP
    %20 = icmp slt i32 %a7, 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7 -> TOP
    %22 = or i1 %21, %20 -> TOP
  }
}

------------calc
[j]  BB: obc_err_1
  store i32 62, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %22 = or i1 %21, %20 -> TOP
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %22 = or i1 %21, %20 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %20 = icmp slt i32 %a7, 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> TOP
    %22 = or i1 %21, %20 -> TOP
  }
}

------------calc
[j]  BB: obc_ok_0
  %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
  %x3 = load i32, ptr %19, align 4
  store i32 %x3, ptr @output_var, align 4
  call void @output()
  call void @input()
  %input_var4 = load i32, ptr @input_var, align 4
  store i32 %input_var4, ptr %a, align 4
  %a5 = load i32, ptr %a, align 4
  store i32 %a5, ptr @arg0, align 4
  call void @funcB()
  %arg16 = load i32, ptr @arg1, align 4
  store i32 %arg16, ptr %a, align 4
  %a7 = load i32, ptr %a, align 4
  br label %obc_check_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
[j]  GEP: not const
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x3 = load i32, ptr %19, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x3, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @input()
[j]  Other inst:   call void @input()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %input_var4 = load i32, ptr @input_var, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %input_var4, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a5 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %a5, ptr @arg0, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @funcB()
[j]  Other inst:   call void @funcB()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %arg16 = load i32, ptr @arg1, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %arg16, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a7 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %obc_check_1
[j]  Other inst:   br label %obc_check_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
  }
}

------------calc
[j]  BB: obc_check_1
  %20 = icmp slt i32 %a7, 0
  %21 = icmp sge i32 %a7, 16
  %22 = or i1 %21, %20
  br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  @output_var = global i32 0 -> TOP
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %20 = icmp slt i32 %a7, 0
[j]  icmp:   %20 = icmp slt i32 %a7, 0
[j]  val1: 0 val2: 0 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %21 = icmp sge i32 %a7, 16
[j]  icmp:   %21 = icmp sge i32 %a7, 16
[j]  val1: 0 val2: 16 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %22 = or i1 %21, %20
[j]  BinaryOperator:   %22 = or i1 %21, %20
[j]  op1 in cvmap
[j]  op2 in cvmap
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  Or: 0 | 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  Other inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  @output_var = global i32 0 -> TOP
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  }
}

------------calc
[j]  BB: obc_ok_1
  %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
  %x8 = load i32, ptr %23, align 4
  store i32 %x8, ptr @output_var, align 4
  call void @output()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x8 = load i32, ptr %23, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x8, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  @output_var = global i32 0 -> TOP
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  @output_var = global i32 0 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %x8 = load i32, ptr %23, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  }
}

------------calc
[j]  BB: obc_err_1
  store i32 62, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  @output_var = global i32 0 -> TOP
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
  }
}

------------calc
[j]  BB: obc_err_0
  store i32 54, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

------------calc
[j]  BB: obc_check_0
  %16 = icmp slt i32 %a2, 0
  %17 = icmp sge i32 %a2, 16
  %18 = or i1 %17, %16
  br i1 %18, label %obc_err_0, label %obc_ok_0
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %16 = icmp slt i32 %a2, 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %17 = icmp sge i32 %a2, 16
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %18 = or i1 %17, %16
[j]  BinaryOperator:   %18 = or i1 %17, %16
[j]  op1 in cvmap
[j]  op2 in cvmap
[j]  !kset1 || !kset2 || kset1->top || kset2->top
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %18, label %obc_err_0, label %obc_ok_0
[j]  Other inst:   br i1 %18, label %obc_err_0, label %obc_ok_0
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
  }
}

------------calc
[j]  BB: obc_ok_0
  %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
  %x3 = load i32, ptr %19, align 4
  store i32 %x3, ptr @output_var, align 4
  call void @output()
  call void @input()
  %input_var4 = load i32, ptr @input_var, align 4
  store i32 %input_var4, ptr %a, align 4
  %a5 = load i32, ptr %a, align 4
  store i32 %a5, ptr @arg0, align 4
  call void @funcB()
  %arg16 = load i32, ptr @arg1, align 4
  store i32 %arg16, ptr %a, align 4
  %a7 = load i32, ptr %a, align 4
  br label %obc_check_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %16 = icmp slt i32 %a2, 0 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %18 = or i1 %17, %16 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
[j]  GEP: not const
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x3 = load i32, ptr %19, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x3, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @input()
[j]  Other inst:   call void @input()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %input_var4 = load i32, ptr @input_var, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %input_var4, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a5 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %a5, ptr @arg0, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @funcB()
[j]  Other inst:   call void @funcB()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %arg16 = load i32, ptr @arg1, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %arg16, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a7 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %obc_check_1
[j]  Other inst:   br label %obc_check_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %18 = or i1 %17, %16 -> TOP
  }
}

------------calc
[j]  BB: obc_check_1
  %20 = icmp slt i32 %a7, 0
  %21 = icmp sge i32 %a7, 16
  %22 = or i1 %21, %20
  br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %16 = icmp slt i32 %a2, 0 -> TOP
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  @output_var = global i32 0 -> TOP
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %20 = icmp slt i32 %a7, 0
[j]  icmp:   %20 = icmp slt i32 %a7, 0
[j]  val1: 0 val2: 0 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %21 = icmp sge i32 %a7, 16
[j]  icmp:   %21 = icmp sge i32 %a7, 16
[j]  val1: 0 val2: 16 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %22 = or i1 %21, %20
[j]  BinaryOperator:   %22 = or i1 %21, %20
[j]  op1 in cvmap
[j]  op2 in cvmap
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  Or: 0 | 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  Other inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %18 = or i1 %17, %16 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %22 = or i1 %21, %20 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %18 = or i1 %17, %16 -> TOP
    %20 = icmp slt i32 %a7, 0 -> 0 
  }
}

------------calc
[j]  BB: obc_ok_1
  %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
  %x8 = load i32, ptr %23, align 4
  store i32 %x8, ptr @output_var, align 4
  call void @output()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> 0 
    %18 = or i1 %17, %16 -> TOP
    %22 = or i1 %21, %20 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x8 = load i32, ptr %23, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x8, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x3 = load i32, ptr %19, align 4 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %18 = or i1 %17, %16 -> TOP
    %22 = or i1 %21, %20 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7 -> 0 
    %16 = icmp slt i32 %a2, 0 -> TOP
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %x3 = load i32, ptr %19, align 4 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %a = alloca i32, align 4 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %18 = or i1 %17, %16 -> TOP
    %22 = or i1 %21, %20 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %x8 = load i32, ptr %23, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> 0 
  }
}

------------calc
[j]  BB: obc_err_1
  store i32 62, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %20 = icmp slt i32 %a7, 0 -> 0 
    %18 = or i1 %17, %16 -> TOP
    %22 = or i1 %21, %20 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x3 = load i32, ptr %19, align 4 -> TOP
    %21 = icmp sge i32 %a7, 16 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %18 = or i1 %17, %16 -> TOP
    %22 = or i1 %21, %20 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a7 = load i32, ptr %a, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %a = alloca i32, align 4 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %16 = icmp slt i32 %a2, 0 -> TOP
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> TOP
    %a = alloca i32, align 4 -> 0 
  @output_var = global i32 0 -> TOP
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
  @arg0 = global i32 0 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> TOP
    %a5 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %18 = or i1 %17, %16 -> TOP
    %20 = icmp slt i32 %a7, 0 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %x3 = load i32, ptr %19, align 4 -> TOP
  }
}

------------calc
[j]  BB: obc_err_0
  store i32 54, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %16 = icmp slt i32 %a2, 0 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %18 = or i1 %17, %16 -> TOP
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %16 = icmp slt i32 %a2, 0 -> TOP
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %16 = icmp slt i32 %a2, 0 -> TOP
    %17 = icmp sge i32 %a2, 16 -> TOP
    %18 = or i1 %17, %16 -> TOP
  }
}

------------calc
[j]  BB: entry
  %a = alloca i32, align 4
  store i32 -1, ptr %a, align 4
  %x = alloca [16 x i32], align 4
  %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0
  store i32 0, ptr %0, align 4
  %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1
  store i32 1, ptr %1, align 4
  %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2
  store i32 2, ptr %2, align 4
  %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3
  store i32 3, ptr %3, align 4
  %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4
  store i32 4, ptr %4, align 4
  %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5
  store i32 5, ptr %5, align 4
  %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6
  store i32 6, ptr %6, align 4
  %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7
  store i32 7, ptr %7, align 4
  %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8
  store i32 8, ptr %8, align 4
  %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9
  store i32 9, ptr %9, align 4
  %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10
  store i32 10, ptr %10, align 4
  %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11
  store i32 11, ptr %11, align 4
  %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12
  store i32 12, ptr %12, align 4
  %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13
  store i32 13, ptr %13, align 4
  %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14
  store i32 14, ptr %14, align 4
  %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15
  store i32 15, ptr %15, align 4
  call void @input()
  %input_var = load i32, ptr @input_var, align 4
  store i32 %input_var, ptr %a, align 4
  %a1 = load i32, ptr %a, align 4
  store i32 %a1, ptr @arg0, align 4
  call void @funcA()
  %arg1 = load i32, ptr @arg1, align 4
  store i32 %arg1, ptr %a, align 4
  %a2 = load i32, ptr %a, align 4
  br label %obc_check_0
[j]  ConstantPropagator.cpp initGlobal 573
[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a = alloca i32, align 4
[j]  Other inst:   %a = alloca i32, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 -1, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x = alloca [16 x i32], align 4
[j]  Other inst:   %x = alloca [16 x i32], align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 0, ptr %0, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 1, ptr %1, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 2, ptr %2, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 3, ptr %3, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 4, ptr %4, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 5, ptr %5, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 6, ptr %6, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 7, ptr %7, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 8, ptr %8, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 9, ptr %9, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 10, ptr %10, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 11, ptr %11, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 12, ptr %12, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 13, ptr %13, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 14, ptr %14, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 15, ptr %15, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @input()
[j]  Other inst:   call void @input()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %input_var = load i32, ptr @input_var, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %input_var, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a1 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %a1, ptr @arg0, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @funcA()
[j]  Other inst:   call void @funcA()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %arg1 = load i32, ptr @arg1, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %arg1, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a2 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %obc_check_0
[j]  Other inst:   br label %obc_check_0
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a2 = load i32, ptr %a, align 4 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %a = alloca i32, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
  }
}

------------calc
[j]  BB: obc_check_0
  %16 = icmp slt i32 %a2, 0
  %17 = icmp sge i32 %a2, 16
  %18 = or i1 %17, %16
  br i1 %18, label %obc_err_0, label %obc_ok_0
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %a = alloca i32, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %16 = icmp slt i32 %a2, 0
[j]  icmp:   %16 = icmp slt i32 %a2, 0
[j]  val1: 0 val2: 0 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %17 = icmp sge i32 %a2, 16
[j]  icmp:   %17 = icmp sge i32 %a2, 16
[j]  val1: 0 val2: 16 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %18 = or i1 %17, %16
[j]  BinaryOperator:   %18 = or i1 %17, %16
[j]  op1 in cvmap
[j]  op2 in cvmap
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  Or: 0 | 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %18, label %obc_err_0, label %obc_ok_0
[j]  Other inst:   br i1 %18, label %obc_err_0, label %obc_ok_0
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %a = alloca i32, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> 0 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %a = alloca i32, align 4 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  }
}

------------calc
[j]  BB: obc_ok_0
  %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
  %x3 = load i32, ptr %19, align 4
  store i32 %x3, ptr @output_var, align 4
  call void @output()
  call void @input()
  %input_var4 = load i32, ptr @input_var, align 4
  store i32 %input_var4, ptr %a, align 4
  %a5 = load i32, ptr %a, align 4
  store i32 %a5, ptr @arg0, align 4
  call void @funcB()
  %arg16 = load i32, ptr @arg1, align 4
  store i32 %arg16, ptr %a, align 4
  %a7 = load i32, ptr %a, align 4
  br label %obc_check_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %18 = or i1 %17, %16 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %a = alloca i32, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x3 = load i32, ptr %19, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x3, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @input()
[j]  Other inst:   call void @input()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %input_var4 = load i32, ptr @input_var, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %input_var4, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a5 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %a5, ptr @arg0, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @funcB()
[j]  Other inst:   call void @funcB()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %arg16 = load i32, ptr @arg1, align 4
[j]  Load: global
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %arg16, ptr %a, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %a7 = load i32, ptr %a, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br label %obc_check_1
[j]  Other inst:   br label %obc_check_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %a = alloca i32, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %a7 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
  }
}

------------calc
[j]  BB: obc_check_1
  %20 = icmp slt i32 %a7, 0
  %21 = icmp sge i32 %a7, 16
  %22 = or i1 %21, %20
  br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
  @output_var = global i32 0 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %20 = icmp slt i32 %a7, 0
[j]  icmp:   %20 = icmp slt i32 %a7, 0
[j]  val1: 0 val2: 0 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %21 = icmp sge i32 %a7, 16
[j]  icmp:   %21 = icmp sge i32 %a7, 16
[j]  val1: 0 val2: 16 res: 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %22 = or i1 %21, %20
[j]  BinaryOperator:   %22 = or i1 %21, %20
[j]  op1 in cvmap
[j]  op2 in cvmap
[j]  kset1->const_vals.size() = 1, kset2->const_vals.size() = 1
[j]  Or: 0 | 0
[j]  ConstantPropagator.cpp compDFVal 65 inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  Other inst:   br i1 %22, label %obc_err_1, label %obc_ok_1
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %22 = or i1 %21, %20 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
  }
}

------------calc
[j]  BB: obc_ok_1
  %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
  %x8 = load i32, ptr %23, align 4
  store i32 %x8, ptr @output_var, align 4
  call void @output()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %a = alloca i32, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %21 = icmp sge i32 %a7, 16 -> 0 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

[j]  Dataflow.h compDFVal 60
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
[j]  ConstantPropagator.cpp compDFVal 65 inst:   %x8 = load i32, ptr %23, align 4
[j]  Load: from cvmap
[j]  ConstantPropagator.cpp compDFVal 65 inst:   store i32 %x8, ptr @output_var, align 4
[j]  ConstantPropagator.cpp compDFVal 65 inst:   call void @output()
[j]  Other inst:   call void @output()
[j]  ConstantPropagator.cpp compDFVal 65 inst:   ret void
[j]  Other inst:   ret void
[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %22 = or i1 %21, %20 -> 0 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
  @output_var = global i32 0 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %x8 = load i32, ptr %23, align 4 -> 0 
    %23 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %18 = or i1 %17, %16 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %22 = or i1 %21, %20 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
  }
}

------------calc
[j]  BB: obc_err_1
  store i32 62, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %a = alloca i32, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %21 = icmp sge i32 %a7, 16 -> 0 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %22 = or i1 %21, %20 -> 0 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %a = alloca i32, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
  @output_var = global i32 0 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
  @output_var = global i32 0 -> 0 
    %19 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2 -> 0 
    %18 = or i1 %17, %16 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %input_var4 = load i32, ptr @input_var, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %a = alloca i32, align 4 -> 0 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %21 = icmp sge i32 %a7, 16 -> 0 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %x3 = load i32, ptr %19, align 4 -> 0 
    %22 = or i1 %21, %20 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %20 = icmp slt i32 %a7, 0 -> 0 
    %arg16 = load i32, ptr @arg1, align 4 -> 0 
    %a7 = load i32, ptr %a, align 4 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %a5 = load i32, ptr %a, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

------------calc
[j]  BB: obc_err_0
  store i32 54, ptr @arg0, align 4
  store i32 17, ptr @arg1, align 4
  store [2 x i8] c"x\00", ptr @arg2, align 1
  call void @obc_check_error()
  ret void
[j]  ConstantPropagator.cpp initGlobal 573
[j]  ConstantPropagator.cpp merge 532
[j]  dest: ConstValueState {
  ConstValueMap: ConstValueMap {
  }
}

[j]  src: ConstValueState {
  ConstValueMap: ConstValueMap {
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %18 = or i1 %17, %16 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %a = alloca i32, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

[j]  in:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
    %a = alloca i32, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
  @arg0 = global i32 0 -> 0 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %18 = or i1 %17, %16 -> 0 
  }
}

[j]  out:
ConstValueState {
  ConstValueMap: ConstValueMap {
    %18 = or i1 %17, %16 -> 0 
    %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1 -> 1 
    %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4 -> 4 
    %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11 -> 11 
    %a1 = load i32, ptr %a, align 4 -> 0 
    %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0 -> 0 
    %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12 -> 12 
    %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9 -> 9 
    %a2 = load i32, ptr %a, align 4 -> 0 
    %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14 -> 14 
    %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8 -> 8 
  @arg0 = global i32 0 -> 0 
    %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13 -> 13 
    %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15 -> 15 
    %17 = icmp sge i32 %a2, 16 -> 0 
    %16 = icmp slt i32 %a2, 0 -> 0 
    %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6 -> 6 
    %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10 -> 10 
    %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3 -> 3 
    %input_var = load i32, ptr @input_var, align 4 -> 0 
    %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5 -> 5 
    %arg1 = load i32, ptr @arg1, align 4 -> 0 
    %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7 -> 7 
    %a = alloca i32, align 4 -> 0 
    %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2 -> 2 
  }
}

check_redundant: obc_check_0
check_redundant: obc_check_1
[j]  ConstantPropagator.cpp removeRedundant 678
============== Remove Start ==============
idx:   in [0, 16)
Index val:0 
Removing:
obc_check_0:                                      ; preds = %entry
  %16 = icmp slt i32 %a2, 0
  %17 = icmp sge i32 %a2, 16
  %18 = or i1 %17, %16
  br i1 %18, label %obc_err_0, label %obc_ok_0

idx:   in [0, 16)
Index val:0 
Removing:
obc_check_1:                                      ; preds = %obc_ok_0
  %17 = icmp slt i32 %a7, 0
  %18 = icmp sge i32 %a7, 16
  %19 = or i1 %18, %17
  br i1 %19, label %obc_err_1, label %obc_ok_1
input KSet Size:

[+]SAFEC IR GEN BEGIN[+]
Module Name 11.c

; ModuleID = '11.c'
source_filename = "11.c"

@input_var = global i32 0
@output_var = global i32 0
@arg0 = global i32 0
@arg1 = global i32 0
@arg2 = global i32 0
@line = global i32 0
@pos = global i32 0
@str = global [17 x i8] c"SafeC IR Builder\00"

declare void @input_impl(ptr)

declare void @output_impl(ptr)

declare void @obc_check_error_impl(ptr, ptr)

define void @input() {
entry:
  call void @input_impl(ptr @input_var)
  ret void
}

define void @output() {
entry:
  call void @output_impl(ptr @output_var)
  ret void
}

define void @obc_check_error() {
entry:
  call void @obc_check_error_impl(ptr @line, ptr @pos, ptr @str)
  ret void
}

define void @funcA() {
entry:
  %x = alloca i32, align 4
  store i32 -1, ptr %x, align 4
  %cond = alloca i32, align 4
  store i32 -1, ptr %cond, align 4
  call void @input()
  %input_var = load i32, ptr @input_var, align 4
  store i32 %input_var, ptr %cond, align 4
  %cond1 = load i32, ptr %cond, align 4
  %0 = srem i32 %cond1, 7
  %1 = icmp eq i32 %0, 5
  br i1 %1, label %if, label %else

if:                                               ; preds = %entry
  store i32 9, ptr @arg1, align 4
  br label %merge

else:                                             ; preds = %entry
  store i32 10, ptr @arg1, align 4
  br label %merge

merge:                                            ; preds = %else, %if
  ret void
}

define void @funcB() {
entry:
  %x = alloca i32, align 4
  store i32 -1, ptr %x, align 4
  %cond = alloca i32, align 4
  store i32 -1, ptr %cond, align 4
  call void @input()
  %input_var = load i32, ptr @input_var, align 4
  store i32 %input_var, ptr %cond, align 4
  %cond1 = load i32, ptr %cond, align 4
  %0 = srem i32 %cond1, 7
  %1 = icmp eq i32 %0, 5
  br i1 %1, label %if, label %else

if:                                               ; preds = %entry
  store i32 9, ptr @arg1, align 4
  br label %merge

else:                                             ; preds = %entry
  %cond2 = load i32, ptr %cond, align 4
  %2 = icmp slt i32 %cond2, 0
  br i1 %2, label %if3, label %else4

merge:                                            ; preds = %merge5, %if
  ret void

if3:                                              ; preds = %else
  %cond6 = load i32, ptr %cond, align 4
  %3 = sub i32 0, %cond6
  store i32 %3, ptr %cond, align 4
  br label %cond7

else4:                                            ; preds = %else
  br label %merge5

merge5:                                           ; preds = %else4, %merge8
  br label %merge

cond7:                                            ; preds = %body, %if3
  %cond9 = load i32, ptr %cond, align 4
  %4 = icmp sge i32 %cond9, 0
  br i1 %4, label %body, label %merge8

body:                                             ; preds = %cond7
  %x10 = load i32, ptr %x, align 4
  %5 = add i32 1, %x10
  store i32 %5, ptr %x, align 4
  %cond11 = load i32, ptr %cond, align 4
  %6 = sub i32 %cond11, 1
  store i32 %6, ptr %cond, align 4
  br label %cond7

merge8:                                           ; preds = %cond7
  %x12 = load i32, ptr %x, align 4
  store i32 %x12, ptr @arg1, align 4
  br label %merge5
}

define void @main() {
entry:
  %a = alloca i32, align 4
  store i32 -1, ptr %a, align 4
  %x = alloca [16 x i32], align 4
  %0 = getelementptr [16 x i32], ptr %x, i32 0, i32 0
  store i32 0, ptr %0, align 4
  %1 = getelementptr [16 x i32], ptr %x, i32 0, i32 1
  store i32 1, ptr %1, align 4
  %2 = getelementptr [16 x i32], ptr %x, i32 0, i32 2
  store i32 2, ptr %2, align 4
  %3 = getelementptr [16 x i32], ptr %x, i32 0, i32 3
  store i32 3, ptr %3, align 4
  %4 = getelementptr [16 x i32], ptr %x, i32 0, i32 4
  store i32 4, ptr %4, align 4
  %5 = getelementptr [16 x i32], ptr %x, i32 0, i32 5
  store i32 5, ptr %5, align 4
  %6 = getelementptr [16 x i32], ptr %x, i32 0, i32 6
  store i32 6, ptr %6, align 4
  %7 = getelementptr [16 x i32], ptr %x, i32 0, i32 7
  store i32 7, ptr %7, align 4
  %8 = getelementptr [16 x i32], ptr %x, i32 0, i32 8
  store i32 8, ptr %8, align 4
  %9 = getelementptr [16 x i32], ptr %x, i32 0, i32 9
  store i32 9, ptr %9, align 4
  %10 = getelementptr [16 x i32], ptr %x, i32 0, i32 10
  store i32 10, ptr %10, align 4
  %11 = getelementptr [16 x i32], ptr %x, i32 0, i32 11
  store i32 11, ptr %11, align 4
  %12 = getelementptr [16 x i32], ptr %x, i32 0, i32 12
  store i32 12, ptr %12, align 4
  %13 = getelementptr [16 x i32], ptr %x, i32 0, i32 13
  store i32 13, ptr %13, align 4
  %14 = getelementptr [16 x i32], ptr %x, i32 0, i32 14
  store i32 14, ptr %14, align 4
  %15 = getelementptr [16 x i32], ptr %x, i32 0, i32 15
  store i32 15, ptr %15, align 4
  call void @input()
  %input_var = load i32, ptr @input_var, align 4
  store i32 %input_var, ptr %a, align 4
  %a1 = load i32, ptr %a, align 4
  store i32 %a1, ptr @arg0, align 4
  call void @funcA()
  %arg1 = load i32, ptr @arg1, align 4
  store i32 %arg1, ptr %a, align 4
  %a2 = load i32, ptr %a, align 4
  br label %obc_ok_0

obc_ok_0:                                         ; preds = %entry
  %16 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a2
  %x3 = load i32, ptr %16, align 4
  store i32 %x3, ptr @output_var, align 4
  call void @output()
  call void @input()
  %input_var4 = load i32, ptr @input_var, align 4
  store i32 %input_var4, ptr %a, align 4
  %a5 = load i32, ptr %a, align 4
  store i32 %a5, ptr @arg0, align 4
  call void @funcB()
  %arg16 = load i32, ptr @arg1, align 4
  store i32 %arg16, ptr %a, align 4
  %a7 = load i32, ptr %a, align 4
  br label %obc_ok_1

obc_ok_1:                                         ; preds = %obc_ok_0
  %17 = getelementptr [16 x i32], ptr %x, i32 0, i32 %a7
  %x8 = load i32, ptr %17, align 4
  store i32 %x8, ptr @output_var, align 4
  call void @output()
  ret void
}

[+]SAFEC IR GEN END[+]

[+]SAFEC EXECUTE BEGIN[+]
input:input:output:10
input:input:output:10

[+]SAFEC EXECUTE END[+]
